O:26:"core_cache\version_wrapper":2:{s:4:"data";O:8:"stdClass":9:{s:7:"modinfo";a:4:{i:1;O:8:"stdClass":14:{s:2:"id";s:1:"1";s:2:"cm";s:1:"1";s:3:"mod";s:5:"forum";s:7:"section";s:1:"0";s:9:"sectionid";s:1:"1";s:6:"module";s:2:"10";s:5:"added";s:10:"1681573954";s:7:"visible";s:1:"1";s:19:"visibleoncoursepage";i:1;s:10:"visibleold";s:1:"1";s:19:"completionpassgrade";s:1:"0";s:15:"downloadcontent";s:1:"1";s:4:"lang";N;s:4:"name";s:13:"Announcements";}i:6;O:8:"stdClass":14:{s:2:"id";s:1:"4";s:2:"cm";s:1:"6";s:3:"mod";s:5:"forum";s:7:"section";s:1:"0";s:9:"sectionid";s:1:"1";s:6:"module";s:2:"10";s:5:"added";s:10:"1688304197";s:7:"visible";s:1:"1";s:19:"visibleoncoursepage";i:1;s:10:"visibleold";s:1:"1";s:19:"completionpassgrade";s:1:"0";s:15:"downloadcontent";s:1:"1";s:4:"lang";N;s:4:"name";s:12:"Social forum";}i:2;O:8:"stdClass":17:{s:2:"id";s:1:"1";s:2:"cm";s:1:"2";s:3:"mod";s:5:"label";s:7:"section";s:1:"1";s:9:"sectionid";s:1:"2";s:6:"module";s:2:"14";s:5:"added";s:10:"1681574066";s:7:"visible";s:1:"1";s:19:"visibleoncoursepage";i:1;s:10:"visibleold";s:1:"1";s:10:"completion";s:1:"1";s:19:"completionpassgrade";s:1:"0";s:15:"showdescription";s:1:"1";s:15:"downloadcontent";s:1:"1";s:4:"lang";s:0:"";s:4:"name";s:53:"Node.js is an open-source, cross-platform runtime ...";s:7:"content";s:2542:"<div class="no-overflow"><p dir="ltr" style="text-align: left;"><strong></strong></p><p>Node.js is an open-source, cross-platform runtime environment that allows developers to use JavaScript to create server-side applications. It is based on the Chrome V8 JavaScript engine and runs on a single thread, making it lightweight and efficient. Node.js is also event-driven, meaning that it can handle multiple requests simultaneously without blocking. This makes it ideal for real-time applications, such as chat apps and video streaming services.</p><p>Here are some of the benefits of using Node.js:</p><ul><li><strong>Fast and efficient:</strong>&nbsp;Node.js is built on the V8 JavaScript engine, which is known for its speed and performance. This makes Node.js ideal for applications that need to handle a lot of traffic or that require real-time performance.</li><li><strong>Scalable:</strong>&nbsp;Node.js can be scaled horizontally by adding more nodes to a cluster. This makes it a good choice for applications that need to handle a large number of users or requests.</li><li><strong>Extensible:</strong>&nbsp;Node.js has a large and active community that has developed a wide range of modules and libraries. This makes it easy to find the functionality you need for your application.</li><li><strong>Portable:</strong>&nbsp;Node.js is a cross-platform runtime environment, which means that it can run on Windows, Mac, and Linux. This makes it a good choice for applications that need to be deployed to multiple platforms.</li></ul><p>If you are looking for a fast, efficient, and scalable runtime environment for your JavaScript applications, then Node.js is a good option to consider.</p><p>Here are some of the popular applications that are built on Node.js:</p><ul><li><strong>Express:</strong>&nbsp;Express is a popular web framework for Node.js. It is used to create fast and efficient web applications.</li><li><strong>MongoDB:</strong>&nbsp;MongoDB is a popular NoSQL database that can be used with Node.js. It is a good choice for applications that need to store a large amount of data.</li><li><strong>Socket.io:</strong>&nbsp;Socket.io is a library that allows you to create real-time applications with Node.js. It is used by chat apps, video streaming services, and other applications that need to communicate with users in real time.</li><li><strong>NPM:</strong>&nbsp;NPM is the package manager for Node.js. It allows you to install and manage modules and libraries for your Node.js applications.</li></ul><br><p></p></div>";}i:3;O:8:"stdClass":17:{s:2:"id";s:1:"2";s:2:"cm";s:1:"3";s:3:"mod";s:5:"label";s:7:"section";s:1:"2";s:9:"sectionid";s:1:"3";s:6:"module";s:2:"14";s:5:"added";s:10:"1681699165";s:7:"visible";s:1:"1";s:19:"visibleoncoursepage";i:1;s:10:"visibleold";s:1:"1";s:10:"completion";s:1:"1";s:19:"completionpassgrade";s:1:"0";s:15:"showdescription";s:1:"1";s:15:"downloadcontent";s:1:"1";s:4:"lang";s:0:"";s:4:"name";s:53:"To get started with Node.js, you'll need to follow...";s:7:"content";s:3158:"<div class="no-overflow"><p dir="ltr">To get started with Node.js, you'll need to follow a few steps:</p><p dir="ltr"><br></p><p dir="ltr">Step 1: Install Node.js</p><p dir="ltr">Visit the official Node.js website (https://nodejs.org) and download the latest stable version of Node.js for your operating system (Windows, macOS, or Linux). Follow the installation instructions provided on the website to complete the installation.</p><p dir="ltr"><br></p><p dir="ltr">Step 2: Verify the installation</p><p dir="ltr">Once the installation is complete, open a terminal or command prompt and run the following command to check if Node.js and npm (Node Package Manager) are installed properly:</p><p dir="ltr">```</p><p dir="ltr">node -v</p><p dir="ltr">npm -v</p><p dir="ltr">```</p><p dir="ltr">These commands will display the installed versions of Node.js and npm, respectively. If you see the version numbers, it means Node.js is installed correctly.</p><p dir="ltr"><br></p><p dir="ltr">Step 3: Set up a project directory</p><p dir="ltr">Create a new directory for your Node.js project. Open a terminal or command prompt, navigate to the desired location, and use the following command to create a new directory:</p><p dir="ltr">```</p><p dir="ltr">mkdir my-nodejs-project</p><p dir="ltr">```</p><p dir="ltr">Change "my-nodejs-project" to the desired name of your project.</p><p dir="ltr"><br></p><p dir="ltr">Step 4: Initialize the project</p><p dir="ltr">Navigate into the project directory using the command:</p><p dir="ltr">```</p><p dir="ltr">cd my-nodejs-project</p><p dir="ltr">```</p><p dir="ltr">Once inside the project directory, run the following command to initialize a new Node.js project:</p><p dir="ltr">```</p><p dir="ltr">npm init</p><p dir="ltr">```</p><p dir="ltr">This command will guide you through a series of prompts to set up your project. You can press enter to accept the default values or provide your own information.</p><p dir="ltr"><br></p><p dir="ltr">Step 5: Create a basic Node.js file</p><p dir="ltr">After initializing the project, create a new file within the project directory. You can use any text editor to create the file. For example, you can use the following command to create a file named `app.js`:</p><p dir="ltr">```</p><p dir="ltr">touch app.js</p><p dir="ltr">```</p><p dir="ltr">Open `app.js` in your text editor and start writing your Node.js code.</p><p dir="ltr"><br></p><p dir="ltr">Step 6: Run your Node.js application</p><p dir="ltr">In the terminal or command prompt, navigate to your project directory (`my-nodejs-project`) if you're not already there. Then, use the following command to run your Node.js application:</p><p dir="ltr">```</p><p dir="ltr">node app.js</p><p dir="ltr">```</p><p dir="ltr">Replace `app.js` with the name of your Node.js file if you used a different name.</p><p dir="ltr"><br></p><p dir="ltr">Congratulations! You've set up your Node.js project and executed your first Node.js application. From here, you can continue learning and exploring the various capabilities and libraries available in Node.js to build web applications, APIs, command-line tools, and more.</p></div>";}}s:12:"sectioncache";a:3:{i:0;O:8:"stdClass":3:{s:2:"id";s:1:"1";s:4:"name";N;s:12:"availability";N;}i:1;O:8:"stdClass":3:{s:2:"id";s:1:"2";s:4:"name";s:12:"Introduction";s:12:"availability";N;}i:2;O:8:"stdClass":3:{s:2:"id";s:1:"3";s:4:"name";s:20:"Starting with nodejs";s:12:"availability";N;}}s:9:"shortname";s:6:"nodejs";s:8:"fullname";s:6:"Nodejs";s:6:"format";s:6:"topics";s:16:"enablecompletion";s:1:"1";s:9:"groupmode";s:1:"0";s:14:"groupmodeforce";s:1:"0";s:8:"cacherev";s:10:"1688304775";}s:7:"version";i:1688304775;}